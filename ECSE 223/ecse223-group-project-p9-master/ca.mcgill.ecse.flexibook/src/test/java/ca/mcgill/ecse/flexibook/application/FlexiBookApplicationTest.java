/*
 * This Java source file was generated by the Gradle 'init' task.
 */
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.mcgill.ecse.flexibook.application;

import org.junit.jupiter.api.Test;

import ca.mcgill.ecse.flexibook.model.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import ca.mcgill.ecse.flexibook.persistence.FlexiBookPersistence;

import java.io.File;
import java.sql.Date;
import java.sql.Time;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;

class FlexiBookApplicationTest {
    
    //-----Testing Persistence------//
    
    private static String filename = "testdata.flexibook";
    
    @BeforeAll
	public static void setUpOnce() {
		FlexiBookPersistence.setFilename(filename);
	}
	
	@BeforeEach
	public void setUp() {
		// remove test file
		File f = new File(filename);
		f.delete();
		// clear all data
		FlexiBook fb = FlexiBookApplication.getFlexiBook();
		fb.delete();
	}
	
	@Test
	public void testPersistence() throws ParseException {
		FlexiBook fb = FlexiBookApplication.getFlexiBook();
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		java.util.Date date1 = format.parse("2020-10-10");
		Date startDate = new Date(date1.getTime());
		java.util.Date date2 = format.parse("2020-10-11"); 
		Date endDate = new Date(date2.getTime());
		Time startTime = new Time(13,0,0);
		Time endTime = new Time(14,0,0);
		TimeSlot aTimeSlot = new TimeSlot(startDate, startTime, endDate, endTime, fb);
		String name = "name";
		String address = "address";
		String number = "000-000-0000";
		String email = "test@flexibook.com";
		Business aBusiness = new Business(name, address, number, email, fb);
		boolean businessAdded = fb.setBusiness(aBusiness);
		fb.getBusiness().addVacationAt(aTimeSlot, 0);
		boolean timeSlotAdded = fb.addTimeSlotAt(aTimeSlot, 0);
		BusinessHour.DayOfWeek day = BusinessHour.DayOfWeek.Friday;
		BusinessHour aHour = new BusinessHour(day, startTime, endTime, fb);
		fb.addHourAt(aHour, 0);
		String username = "ownerUsername";
		String password = "password";
		String ownerUsername = "username";
		int noShows = 0;
		Customer aCustomer = new Customer(username, password, noShows, fb);
		boolean customerAdded = fb.addCustomerAt(aCustomer, 0);
		Owner owner = new Owner(ownerUsername, password, fb);
		boolean ownerAdded = fb.setOwner(owner);
		String service = "wash";
		BookableService bookableService = new Service(service, fb, 5, 10, 15);
		boolean serviceAdded = fb.addBookableServiceAt(bookableService, 0);
//		Appointment TestAp = fb.addAppointment(aCustomer, bookableService, aTimeSlot);
//		boolean appointmentAdded = fb.addAppointmentAt(TestAp, 0);
		
		FlexiBookPersistence.save(fb);
		
		//Load and check
		FlexiBook fb2 = FlexiBookPersistence.load();
		checkOwner(ownerUsername, password, fb2);
		checkCustomer(username, password, noShows, fb2);
		//checkAppointment(aCustomer, bookableService, aTimeSlot, fb2);
		checkTimeSlot(aTimeSlot.getStartDate(), aTimeSlot.getEndDate(), aTimeSlot.getStartTime(), aTimeSlot.getEndTime(), fb2);
		checkBusinessHour(day, startTime, endTime, fb2);
		checkBusiness(name, address, number, email, fb2);
		
	}
	
	@Test
	public void testPersistenceReinitialization() throws ParseException {
		FlexiBook fb = FlexiBookApplication.getFlexiBook();
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		java.util.Date date1 = format.parse("2020-10-10");
		Date startDate = new Date(date1.getTime());
		java.util.Date date2 = format.parse("2020-10-11"); 
		Date endDate = new Date(date2.getTime());
		Time startTime = new Time(13,0,0);
		Time endTime = new Time(14,0,0);
		TimeSlot aTimeSlot = new TimeSlot(startDate, startTime, endDate, endTime, fb);
		String name = "name";
		String address = "address";
		String number = "000-000-0000";
		String email = "test@flexibook.com";
		Business aBusiness = new Business(name, address, number, email, fb);
		boolean businessAdded = fb.setBusiness(aBusiness);
		fb.getBusiness().addVacationAt(aTimeSlot, 0);
		boolean timeSlotAdded = fb.addTimeSlotAt(aTimeSlot, 0);
		BusinessHour.DayOfWeek day = BusinessHour.DayOfWeek.Friday;
		BusinessHour aHour = new BusinessHour(day, startTime, endTime, fb);
		fb.addHourAt(aHour, 0);
		String username = "ownerUsername";
		String password = "password";
		String ownerUsername = "username";
		int noShows = 0;
		Customer aCustomer = new Customer(username, password, noShows, fb);
		boolean customerAdded = fb.addCustomerAt(aCustomer, 0);
		Owner owner = new Owner(ownerUsername, password, fb);
		boolean ownerAdded = fb.setOwner(owner);
		String service = "wash";
		BookableService bookableService = new Service(service, fb, 5, 10, 15);
		boolean serviceAdded = fb.addBookableServiceAt(bookableService, 0);
		
		FlexiBookPersistence.save(fb);
		
		// simulate shutting down the application
		fb.delete();
		fb.reinitialize();
		checkOwner(ownerUsername, password, fb);
		checkCustomer(username, password, noShows, fb);
		//checkAppointment(aCustomer, bookableService, aTimeSlot, fb);
		checkTimeSlot(aTimeSlot.getStartDate(), aTimeSlot.getEndDate(), aTimeSlot.getStartTime(), aTimeSlot.getEndTime(), fb);
		checkBusinessHour(day, startTime, endTime, fb);
		checkBusiness(name, address, number, email, fb);
		
		// load model again and add further model elements
		fb = FlexiBookPersistence.load();
		checkOwner(ownerUsername, password, fb);
		checkCustomer(username, password, noShows, fb);
		//checkAppointment(aCustomer, bookableService, aTimeSlot, fb);
		checkTimeSlot(aTimeSlot.getStartDate(), aTimeSlot.getEndDate(), aTimeSlot.getStartTime(), aTimeSlot.getEndTime(), fb);
		checkBusinessHour(day, startTime, endTime, fb);
		checkBusiness(name, address, number, email, fb);
		
//		
//		String error = null;
//		try {
//			btms.addVehicle(licencePlate);
//		} catch (RuntimeException e) {
//			error = e.getMessage();
//		}
//		// check error
//		assertEquals("Cannot create due to duplicate licencePlate. See http://manual.umple.org?RE003ViolationofUniqueness.html", error);
//
//		error = null;
//		try {
//			btms.addRoute(number);
//		} catch (RuntimeException e) {
//			error = e.getMessage();
//		}
//		// check error
//		assertEquals("Cannot create due to duplicate number. See http://manual.umple.org?RE003ViolationofUniqueness.html", error);
//		
//		btms.addDriver(name + name);
//		btms.getDriver(1).toggleSickStatus();
//		FlexiBookPersistence.save(fb);
//		
//		// load model again and check it
//		fb = FlexiBookPersistence.load();
//		checkResultScheduleTwoDrivers(name, SickStatus.Available, id, date, number, licencePlate, RepairStatus.Available, shift, btms, 1, 1, 1, 1, 2, name + name, SickStatus.Sick, id + 1);
	
	}
	
	private void checkTimeSlot(Date startD, Date endD, Time startT, Time endT, FlexiBook fbs) {
		assertEquals(startD, fbs.getTimeSlot(0).getStartDate());
		assertEquals(endD, fbs.getTimeSlot(0).getEndDate());
		assertEquals(startT, fbs.getTimeSlot(0).getStartTime());
		assertEquals(endT, fbs.getTimeSlot(0).getEndTime());
	}
	
	private void checkBusinessHour(BusinessHour.DayOfWeek weekDay, Time startT, Time endT, FlexiBook fbs) {
		assertEquals(weekDay, fbs.getBusiness().getBusinessHour(0).getDayOfWeek());
		assertEquals(startT, fbs.getTimeSlot(0).getStartTime());
		assertEquals(endT, fbs.getTimeSlot(0).getEndTime());
	}
	
	private void checkBusiness(String name, String address, String phone, String email, FlexiBook fbs) {
		assertEquals(name, fbs.getBusiness().getName());
		assertEquals(phone, fbs.getBusiness().getPhoneNumber());
		assertEquals(email, fbs.getBusiness().getEmail());
		assertEquals(address, fbs.getBusiness().getAddress());
	}
	
	private void checkCustomer(String username, String password, int noShow, FlexiBook fbs) {
		assertEquals(username, fbs.getCustomer(0).getUsername());
		assertEquals(password, fbs.getCustomer(0).getPassword());
		assertEquals(noShow, fbs.getCustomer(0).getNoShow());
	}
	
	private void checkOwner(String username, String password, FlexiBook fbs) {
		assertEquals(username, fbs.getOwner().getUsername());
		assertEquals(password, fbs.getOwner().getPassword());
	}
	
	private void checkAppointment(Customer customer, BookableService service, TimeSlot timeSlot, FlexiBook fbs) {
		assertEquals(customer.getUsername(), fbs.getCustomer(0).getUsername());
		assertEquals(service.getName(), fbs.getBookableService(0).getName());
		assertEquals(timeSlot.getStartDate(), fbs.getTimeSlot(0).getStartDate());
	}
	
	
	
}