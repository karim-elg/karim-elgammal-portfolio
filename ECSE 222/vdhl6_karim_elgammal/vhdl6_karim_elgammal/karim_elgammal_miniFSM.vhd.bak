library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL; 

entity karim_elgammal_miniFSM is 
PORT (clock:    IN STD_LOGIC;
      P:        IN STD_LOGIC;
      reset:    IN STD_LOGIC;
      R :       OUT STD_LOGIC);
END karim_elgammal_miniFSM;

architecture beh of karim_elgammal_miniFSM is 
type state is (A0, A1, A2, A3, A4);

Signal currentState : state;


begin 	
process (clock, reset)

begin 
if (reset = '1') then 
	currentState <= A0;
	
	elsif rising_edge(clock) then 
	
	case currentState is 
		
		when A0 =>
			if P = '1' then 
				currentState <= A1;
					elsif P = '0' then
					currentState <= A0;
					end if; 
					
		when A1 => 
			if P = '1' then 
				currentState <= A1;
				elsif P = '0' then 
					currentState <= A2; 
					end if; 
			
		when A2 => 
			if P = '1' then 
			currentState <= A3;
				elsif P = '0' then 
					currentState <= A0;
					end if; 
					
		when A3 => 
			if P = '1' then 
				currentState <= A4;
					elsif P = '0' then 
						currentState <= A2; 
						end if;
						
		when A4 => 
			if P = '1' then 
				currentState <= A1;
					elsif P = '0' then 
						currentState <= A2; 
						end if; 
	
	
	
BEGIN 
  PROCESS (clock, reset) 
  BEGIN 
    If (reset = ‘1’) THEN            -- Upon reset, set the state to A
	State <= A;
 
    ELSIF rising_edge(clock) THEN    -- if there is a rising edge of the
			 -- clock, then do the stuff below
 
	-- The CASE statement checks the value of the State variable,
	-- and based on the value and any other control signals, changes
	-- to a new state.
	CASE State IS
 
		-- If the current state is A and P is set to 1, then the
		-- next state is B
		WHEN A => 
			IF P='1' THEN 
				State <= B; 
			END IF; 
 
		-- If the current state is B and P is set to 1, then the
		-- next state is C
		WHEN B => 
			IF P='1' THEN 
				State <= C; 
			END IF; 
 
		-- If the current state is C and P is set to 1, then the
		-- next state is D
		WHEN C => 
			IF P='1' THEN 
				State <= D; 
			END IF; 
 
		-- If the current state is D and P is set to 1, then the
		-- next state is B.
		-- If the current state is D and P is set to 0, then the
		-- next state is A.
		WHEN D=> 
			IF P='1' THEN 
				State <= B; 
			ELSE 
				State <= A; 
			END IF; 
			
		WHEN others =>
			State <= A;
	END CASE; 
    END IF; 
  END PROCESS;

-- Decode the current state to create the output
-- if the current state is D, R is 1 otherwise R is 0
R <= ‘1’ WHEN State=D ELSE ‘0’;
END rtl;
	
